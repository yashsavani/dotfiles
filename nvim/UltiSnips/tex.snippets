global !p
def math():
	return False
	return vim.exec_lua(
	"""return require'nvim-treesitter.textobjects.shared'.textobject_at_point([[@text.math]], nil, nil, {})"""
	) is not None
def comment():
	return False
	return vim.exec_lua(
	"""return require'nvim-treesitter.textobjects.shared'.textobject_at_point([[@text.math]], nil, nil, {})"""
	) is not None
def env(name):
	return False
	return vim.exec_lua(
	"""return require'nvim-treesitter.textobjects.shared'.textobject_at_point([[@text.math]], nil, nil, {})"""
	) is not None
endglobal

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

context "math()"
snippet EE "geq" iA
\exists
endsnippet

context "math()"
snippet AA "forall" iA
\forall
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet

context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

priority 200
context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla
endsnippet

context "math()"
snippet xx "cross" iA
\times
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet cc "subset" Ai
\subset
endsnippet

context "math()"
snippet inn "in " iA
\in
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet template "Basic template" b
\documentclass{article}
\usepackage{amsmath,amssymb,amsthm}

\topmargin 0pt
\advance \topmargin by -\headheight
\advance \topmargin by -\headsep
\textheight 8.9in
\oddsidemargin 0pt
\evensidemargin \oddsidemargin
\marginparwidth 0.5in
\textwidth 6.5in
\parindent 0in
\parskip 1.5ex

\usepackage[utf8]{inputenc} % allow utf-8 input
\usepackage[T1]{fontenc}    % use 8-bit T1 fonts
\usepackage{hyperref}       % hyperlinks
\usepackage{url}            % simple URL typesetting
\usepackage{booktabs}       % professional-quality tables
\usepackage{nicefrac}       % compact symbols for 1/2, etc.
\usepackage{microtype}      % microtypography
\usepackage{titlesec}
\usepackage{overpic}
\usepackage{titling}
\usepackage{verbatim}
\usepackage{float}
\usepackage{amssymb,amsfonts,amsmath}
\usepackage{enumerate}
\usepackage[shortlabels]{enumitem}
\usepackage{graphicx,wrapfig,lipsum}
\usepackage{color}
\usepackage{colortbl}
\usepackage{makecell}
\usepackage{multirow}
\usepackage{tabularx}
\usepackage{tikz}
\usepackage{amsthm}
\usepackage{caption}
\usepackage{subfigure}
\usepackage{algpseudocode,algorithm,algorithmicx}
\usepackage{cancel}
\usepackage{listings}

\DeclareMathOperator*{\E}{\mathbb{E}}
\let\Pr\relax
\DeclareMathOperator*{\Pr}{\mathbb{P}}

\bibliographystyle{plainurl}
\newfloat{Figure}{tbp}{loa}
\floatname{Figure}{Figure}
\setlength{\droptitle}{-10em}

\definecolor{codeblue}{rgb}{0.25, 0.5, 0.5}
\definecolor{codekw}{rgb}{0.35, 0.35, 0.75}
\lstdefinestyle{Pytorch}{
    language         = Python,
    backgroundcolor  = \color{white},
    basicstyle       = \ttfamily\footnotesize,
    columns          = fullflexible,
    breaklines       = true,
    captionpos       = b,
    commentstyle     = \fontsize{4pt}{4pt}\color{codeblue},
    keywordstyle     = \fontsize{4pt}{4pt}\color{codekw},
    morekeywords     = with,
}

\newcommand{\eps}{\varepsilon}

\renewcommand\qedsymbol{$\blacksquare$}

\newcommand{\problem}[1]{\section{#1}}		% Problem.
\newcommand{\new}[1]{{\em #1\/}}		% New term (set in italics).
\newcommand{\set}[1]{\\{#1\\}}			% Set (as in \set{1,2,3})
\newcommand{\setof}[2]{\\{\,{#1}|~{#2}\,\\}}	% Set (as in \setof{x}{x > 0})
\newcommand{\C}{\mathbb{C}}	               % Complex numbers.
\newcommand{\N}{\mathbb{N}}                     % Positive integers.
\newcommand{\Q}{\mathbb{Q}}                     % Rationals.
\newcommand{\R}{\mathbb{R}}                     % Reals.
\newcommand{\Z}{\mathbb{Z}}  			 	% Integers.
\newcommand{\LL}{\mathcal{L}}

\newcommand{\compl}[1]{\overline{#1}}	
\renewcommand{\vec}[1]{\boldsymbol{#1}}
\renewcommand{\exp}[1]{\textt{exp}\left({#1}\right)}

\newcommand{\pr}[1]{\text{\bf Pr}\normalfont\lbrack #1 \rbrack} %probability
\newcommand{\ex}[1]{\mathbb{E}\normalfont\lbrack #1 \rbrack}%expectation
\newcommand{\exof}[2]{\mathbb{E}_{#1}\normalfont\lbrack #2 \rbrack}%expectation
\newcommand{\bpr}[1]{\text{\bf Pr}\normalfont \Big[#1 \Big]} %probability
\newcommand{\bex}[1]{\mathbb{E}\normalfont \Big[#1 \Big]}
\newcommand{\ang}[1]{\langle #1 \rangle }

\newcommand{\ind}[1]{\mathbb{I}\left\\{#1\right\\}}
\newcommand{\m}{\mathfrak{m}}
\newcommand{\p}{\mathfrak{p}}
\newcommand{\PP}{\mathbb{P}}
\newcommand{\G}{\mathcal{G}}
\newcommand{\tx}[1]{\text{#1}}
\newcommand{\ttx}[1]{\texttt{#1}}

\widowpenalty=10000
\clubpenalty=10000
\flushbottom
\sloppy

\title{$1}

\author{%
	Yash Savani \\\\
	Computer Science Department \\\\
	Carnegie Mellon University \\\\
	Pittsburgh, PA 15213 \\\\
	ysavani@cs.cmu.edu
}

\begin{document}
\maketitle
$0
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

snippet ;iff "iff" Ai
\iff
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet

snippet ;ct "Cite" wA
\cite{${1:${VISUAL}}}
endsnippet

snippet ;cp "Citep" wA
\cite{${1:${VISUAL}}}
endsnippet

# context "math()"
# snippet // "Fraction" iA
# \\frac{$1}{$2}$0
# endsnippet

# snippet / "Fraction" i
# \\frac{${VISUAL}}{$1}$0
# endsnippet

# context "math()"
# snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
# \\frac{`!p snip.rv = match.group(1)`}{$1}$0
# endsnippet

# priority 1000
# context "math()"
# snippet '^.*\)/' "() frac" wrA
# `!p
# stripped = match.string[:-1]
# depth = 0
# i = len(stripped) - 1
# while True:
# 	if stripped[i] == ')': depth += 1
# 	if stripped[i] == '(': depth -= 1
# 	if depth == 0: break;
# 	i-=1
# snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
# `{$1}$0
# endsnippet

# context "math()"
# snippet '([A-Za-z])(\d)' "auto subscript" wrA
# `!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
# endsnippet

# context "math()"
# snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
# `!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
# endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq
endsnippet

snippet ;ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

snippet ;floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lrnorm "left\| right\|" i
\left\| ${1:${VISUAL}} \right\| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

snippet ;conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{i=${1:1}}^{${2:\infty}} ${3}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}}
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

snippet ;sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

snippet ;sr "^2" iA
^2
endsnippet

snippet ;cb "^3" iA
^3
endsnippet

snippet ;td "to the ... power" iA
^{$1}$0
endsnippet

snippet ;rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le
endsnippet

snippet >= "geq" iA
\ge
endsnippet

snippet ;EE "geq" iA
\exists $1 \text{, such that } $0
endsnippet

snippet ;AA "forall" iA
\forall
endsnippet

snippet ;xnn "xn" iA
x_{n}
endsnippet

snippet ;ynn "yn" iA
y_{n}
endsnippet


snippet ;xii "xi" iA
x_{i}
endsnippet

snippet ;yii "yi" iA
y_{i}
endsnippet

snippet ;xjj "xj" iA
x_{j}
endsnippet

snippet ;yjj "yj" iA
y_{j}
endsnippet

snippet ;xp1 "x" iA
x_{n+1}
endsnippet

snippet ;xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

priority 300
snippet "([A-Z]);mcal" "mathcal" riA
\mathcal{`!p snip.rv=match.group(1)`}
endsnippet

priority 200
snippet ;mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

snippet ;nabl "nabla" iA
\nabla
endsnippet

snippet ;xx "cross" iA
\times
endsnippet

priority 100
snippet ;** "cdot" iA
\cdot
endsnippet

snippet ;norm "norm" iA
\|$1\|$0
endsnippet

priority 300
snippet ;dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

snippet ;invs "inverse" iA
^{-1}
endsnippet

snippet ;compl "complement" iA
^{c}
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

snippet ~~ "~" iA
\sim
endsnippet

snippet ;set "set" wA
\\{$1\\} $0
endsnippet

snippet || "mid" iA
\mid
endsnippet


snippet ;cc "subset" Ai
\subset
endsnippet

snippet notin "not in " iA
\not\in
endsnippet

snippet ;inn "in " iA
\in
endsnippet

snippet NN "n" iA
\N
endsnippet

snippet Nn "cap" iA
\cap
endsnippet

snippet UU "cup" iA
\cup
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" iA
\O
endsnippet

snippet RR "real" iA
\R
endsnippet

snippet Rdd "real" iA
\R^d
endsnippet

snippet Rnn "real" iA
\R^n
endsnippet

snippet QQ "Q" iA
\Q
endsnippet

snippet ZZ "Z" iA
\Z
endsnippet

snippet <! "normal" iA
\triangleleft
endsnippet

snippet <> "hokje" iA
\diamond
endsnippet

# context "math()"
# snippet '(?<!i)sts' "text subscript" irA
# _\text{$1} $0
# endsnippet

snippet ;tt "text" iA
\text{$1}$0
endsnippet

snippet ;mt "text" iA
\texttt{$1}$0
endsnippet

snippet ;case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
snippet ";bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z01]);bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
snippet ";hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z01]);hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
snippet ";vec" "vec" riA
\vec{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z01]);vec" "vec" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
snippet "([a-zA-Z01]);;" "vec" riA
\b`!p snip.rv=match.group(1)`
endsnippet

snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet

snippet HH "H" iA
\mathbb{H}
endsnippet

snippet DD "D" iA
\mathbb{D}
endsnippet

priority 10
snippet ;opt "opt" iA
^*
endsnippet

priority 10
snippet ;ppn "parens" iA
\parens*{${1}}
endsnippet

snippet ;frac "frac" iA
\frac{$1}{$2}$0
endsnippet

snippet ";([a-zA-Z0-9])/([a-zA-Z0-9])" "frac" riA
\frac{`!p snip.rv=match.group(1)`}{`!p snip.rv=match.group(2)`}
endsnippet

snippet ;half "half" iA
\frac{1}{2}
endsnippet

snippet ;third "third" iA
\frac{1}{3}
endsnippet

snippet ;quarter "quarter" iA
\frac{1}{4}
endsnippet

snippet ;fifth "fifth" iA
\frac{1}{5}
endsnippet

snippet ;sixth "sixth" iA
\frac{1}{6}
endsnippet

snippet ;seventh "seventh" iA
\frac{1}{7}
endsnippet

snippet ;eighth "eighth" iA
\frac{1}{8}
endsnippet

snippet ;ninth "ninth" iA
\frac{1}{9}
endsnippet

snippet ;eps "epsilon" iA
\epsilon
endsnippet

snippet ;del "delta" iA
\delta
endsnippet

snippet ;sig "sigma" iA
\sigma
endsnippet

snippet ;oo "compose" iA
\circ
endsnippet

snippet ;FF "script F" iA
\mathcal{F}
endsnippet

context "math()"
snippet FF "script F" iA
\mathcal{F}
endsnippet

snippet "([a-zA-Z]);incal" "x in \calX" riA
`!p snip.rv=match.group(1)` \in \cal`!p snip.rv=match.group(1).upper()`
endsnippet

snippet ;inp "inner product" iA
\angles*{${1}, ${2}}${3}
endsnippet

snippet "\s([a-zA-Z]);loop" "i in [n]" riA
i \in [`!p snip.rv=match.group(1)`]
endsnippet

snippet "\s([a-zA-Z]);sloop" "i in [n]" riA
_{i \in [`!p snip.rv=match.group(1)`]}
endsnippet

snippet "\s([a-zA-Z]);sum" "i in [n]" riA
\sum_{i \in [`!p snip.rv=match.group(1)`]}
endsnippet

snippet "\s([a-zA-Z]);prod" "i in [n]" riA
\prod_{i \in [`!p snip.rv=match.group(1)`]}
endsnippet

snippet "([a-zA-Z])([a-zA-Z]);sum" "sum t in [T]" riA
\sum_{`!p snip.rv=match.group(1)` \in [`!p snip.rv=match.group(2)`]}
endsnippet

snippet "([a-zA-Z])([a-zA-Z]);prod" "prod t in [T]" riA
\prod_{`!p snip.rv=match.group(1)` \in [`!p snip.rv=match.group(2)`]}
endsnippet

snippet "([a-zA-Z]);incal" "x \in \calX" riA
`!p snip.rv=match.group(1)` \in \cal`!p snip.rv=match.group(1).upper()`
endsnippet

snippet ;ppn "\parens*" iA
\parens*{${1}}
endsnippet

snippet ;inp "\angles*" iA
\angles*{${1},${2}}${0}
endsnippet

snippet afsoc "afsoc" iA
Assume for the sake of contradiction 
endsnippet
